https://www.youtube.com/watch?v=V3v5ItyMKVc



#include <msp430.h> 
//drselim MSP430 & SG90 Servo
//1st Example
//Please don't forget to give credits while using the code
//video link for the description of the code:
//https://youtu.be/V3v5ItyMKVc
void main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    BCSCTL1= CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    //PWM period
    P1DIR |= BIT6;
    P1SEL |= BIT6;  //selection for timer setting
    while(1) {
    TACCR0 = 20000;  //PWM period
    TACCR1 = 350;  //CCR1 PWM Duty Cycle  !min 350 max 2600 angle 190,
    //350 2350-180 degrees
    TACCTL1 = OUTMOD_7;  //CCR1 selection reset-set
    TACTL = TASSEL_2|MC_1;   //SMCLK submain clock,upmode
    __delay_cycles(1500000);
    TACCR1 = 2600;
    TACCTL1 = OUTMOD_7;  //CCR1 selection reset-set
    TACTL = TASSEL_2|MC_1;
    __delay_cycles(1500000);
    }
}


--------------------------------------------------------------------------------------------------------------------

#include <msp430.h>
//drselim MSP430 & SG90 Servo
//3rd Example
//Please don't forget to give credits while using the code
//video link for the description of the code:
//https://youtu.be/V3v5ItyMKVc
void main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    BCSCTL1= CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1DIR |= BIT6;
    P1SEL |= BIT6;

    volatile float voltage;
    ADC10CTL0 = SREF_0|ADC10SHT_2|ADC10ON;
    ADC10CTL1 = INCH_3|SHS_0|ADC10DIV_0|ADC10SSEL_0|CONSEQ_0;
    ADC10AE0 = BIT3;  //P1.3 also above, INCH_3
    ADC10CTL0 |= ENC;

    while(1){
        ADC10CTL0 |= ADC10SC;
        while(ADC10CTL1 & ADC10BUSY);
        int memval = ADC10MEM;
        TACCR0 = 20000;
        TACCR1 = (int)(350 + (1.95*memval));
        TACCTL1 = OUTMOD_7;  //CCR1 selection reset-set
        TACTL = TASSEL_2|MC_1;   //SMCLK submain clock,upmode
        __delay_cycles(10000);
    }
}




IAR implementation



#include <msp430.h>

void main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1DIR |= BIT6;
    P1SEL |= BIT6;

    volatile int voltage; // Changed the type to int

    ADC10CTL0 = SREF_0 | ADC10SHT_2 | ADC10ON;
    ADC10CTL1 = INCH_3 | SHS_0 | ADC10DIV_0 | ADC10SSEL_0 | CONSEQ_0;
    ADC10AE0 = BIT3;  // P1.3 also above, INCH_3
    ADC10CTL0 |= ENC;

    while (1)
    {
        ADC10CTL0 |= ADC10SC;
        while (ADC10CTL1 & ADC10BUSY);
        int memval = ADC10MEM;
        TACCR0 = 20000;
        TACCR1 = (int)(350 + (1.95 * memval));
        TACCTL1 = OUTMOD_7;  // CCR1 selection reset-set
        TACTL = TASSEL_2 | MC_1;   // SMCLK submain clock, upmode
        __delay_cycles(10000);
    }
}



---------------------------------------------------------------------------------------------------------------------


#include <msp430.h>
#include <driverlib.h>

#define JOY_X_PIN GPIO_PIN0  // Replace with the actual pin numbers
#define JOY_Y_PIN GPIO_PIN1
#define SERVO1_PIN GPIO_PIN3
#define SERVO2_PIN GPIO_PIN5

void main(void)
{
    // Stop watchdog timer
    WDT_A_hold(WDT_A_BASE);

    // Initialize GPIO for Joystick and Servos
    GPIO_setAsInputPin(GPIO_PORT_P1, JOY_X_PIN);
    GPIO_setAsInputPin(GPIO_PORT_P1, JOY_Y_PIN);
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P1, SERVO1_PIN, GPIO_PRIMARY_MODULE_FUNCTION);
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P1, SERVO2_PIN, GPIO_PRIMARY_MODULE_FUNCTION);

    // Initialize Timer A for PWM (you might need to configure this based on your specific servo)
    Timer_A_initUpModeParam initUpParam = {0};
    initUpParam.clockSource = TIMER_A_CLOCKSOURCE_SMCLK;
    initUpParam.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_1;
    initUpParam.timerPeriod = 20000;  // Adjust this value based on your servo's specifications
    initUpParam.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_1;
    initUpParam.compareOutputMode = TIMER_A_OUTPUTMODE_RESET_SET;

    Timer_A_initUpMode(TIMER_A0_BASE, &initUpParam);
    Timer_A_startCounter(TIMER_A0_BASE, TIMER_A_UP_MODE);

    while (1)
    {
        // Read the value of joystick (between 0-1023)
        int joyValX = analogRead(JOY_X_PIN);
        int joyValY = analogRead(JOY_Y_PIN);

        // Map joystick values to servo range (0-180)
        int mappedValX = map(joyValX, 0, 1023, 0, 180);
        int mappedValY = map(joyValY, 0, 1023, 0, 180);

        // Set the servo positions according to the joystick values
        Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_1, mappedValX);
        Timer_A_setCompareValue(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_2, mappedValY);

        // Add a delay (adjust as needed)
        __delay_cycles(1500000);
    }
}

